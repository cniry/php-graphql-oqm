#!/usr/bin/env php
<?php

$autoLoadFiles = [__DIR__ . '/../vendor/autoload.php', __DIR__ . '/../../../autoload.php'];

// Require autoload.php depending on environment
$autoLoadFound = false;
foreach ($autoLoadFiles as $autoLoadFile) {
	if (file_exists($autoLoadFile)) {
		require $autoLoadFile;
		$autoLoadFound = true;
	}
}
// Exit if autoload.php is not required
if (!$autoLoadFound) {
	throw new RuntimeException('Could not find vendor/autoload.php');
}

use GraphQL\ConfigurationManager;
use GraphQL\Client;
use GraphQL\SchemaGenerator\SchemaClassGenerator;

$configurationManager = new ConfigurationManager();
$configuration = $configurationManager->buildConfiguration();

$authHeaders    = [];
$authHeaderName = !empty($configuration[ConfigurationManager::HEADER_NAME]) ? $configuration[ConfigurationManager::HEADER_NAME] : '';
if ($authHeaderName) {
    $authHeaderValue = $configuration[ConfigurationManager::HEADER_VALUE];
    $authHeaders = [$authHeaderName => $authHeaderValue];
}

$exportDir = $configuration[ConfigurationManager::EXPORT_DIR];
$exportDir = !empty($exportDir) ? $exportDir : '';

$client  = new Client($configuration[ConfigurationManager::ENDPOINT_URL], $authHeaders);
$scanner = new SchemaClassGenerator($client, $exportDir);

print "-------------------------------------------\n";
print "Generating schema objects from schema types\n";
print "-------------------------------------------\n";

$scanner->generateRootQueryObject();

print "-------------------------------------------\n";
print "Schema objects generation complete\n";
print "-------------------------------------------\n";
